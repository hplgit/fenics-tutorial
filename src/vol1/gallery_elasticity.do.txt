# Stand-alone notebook?
# #if FORMAT == "ipynb"
# #include "../mako_code.txt"
# #endif

======= The equations of linear elasticity =======
label{ftut:elast}

Analysis of structures is one of the major activities of modern
engineering, thus making the PDEs for deformation of elastic bodies
likely the most popular PDE model in the world.
It takes just one page of code to solve the equations of 2D or 3D
elasticity in FEniCS, and the details follow below.

===== PDE problem =====

The equations governing small elastic deformations of a body $\Omega$
can be written as

# FIXME: The $\text{Lam\'e's}$ thing is to trick the doconce spell-checking

!bt
\begin{align}
-\nabla\cdot\sigma &= f\hbox{ in }\Omega,
label{ftut:elast:varform:equilibrium}\\
\sigma &= \lambda\,\hbox{tr}\,(\varepsilon) I) + 2\mu\varepsilon,
label{ftut:elast:varform:stresstrain}\\
\varepsilon &= \frac{1}{2}\left(\nabla u + (\nabla u)^{\top}\right),
label{ftut:elast:varform:strainu}
\end{align}
!et
where $\sigma$ is the stress tensor, $f$ is the body force per unit
volume, $\lambda$ and $\mu$ are $\text{Lam\'e's}$ elasticity parameters for the
material in $\Omega$, $I$ is the identity tensor, $\mathrm{tr}$ is the
trace operator on a tensor, $\varepsilon$ is the strain tensor
(symmetric gradient), and $u$ is the displacement vector field.
We have here assumed isotropic elastic conditions.

We combine (ref{ftut:elast:varform:stresstrain}) and
(ref{ftut:elast:varform:strainu}) to obtain

!bt
\begin{equation}
\sigma = \lambda(\nabla\cdot u)I + \mu(\nabla u + (\nabla u)^{\top})\tp
label{ftut:elast:varform:stressu}
\end{equation}
!et
Note that (ref{ftut:elast:varform:equilibrium})--(ref{ftut:elast:varform:strainu})
can easily be transformed to a single vector PDE for $u$, which is the governing
PDE for the unknown $u$ (Navier's equation).
In the derivation of the variational formulation,
however, it is convenient to keep the splitting of the equations as above.

===== Variational formulation =====
label{ftut:elast:varform}

The variational formulation of
(ref{ftut:elast:varform:equilibrium})--(ref{ftut:elast:varform:strainu})
consists of forming the inner product of
(ref{ftut:elast:varform:equilibrium}) and a *vector* test function
$v\in \hat{V}$, where $\hat{V}$ is a vector-valued test function space, and
integrating over the domain $\Omega$:

!bt
\[ -\int_\Omega (\nabla\cdot\sigma) \cdot v \dx =
\int_\Omega f\cdot v\dx\tp\]
!et
Since $\nabla\cdot\sigma$ contains second-order derivatives of the primary
unknown $u$, we integrate this term by parts:

!bt
\[ -\int_\Omega (\nabla\cdot\sigma) \cdot v \dx
= \int_\Omega \sigma : \nabla v\dx - \int_{\partial\Omega}
(\sigma\cdot n)\cdot v \ds,\]
!et
where the colon operator is the inner product between tensors
(summed pairwise product of all elements), and $n$
is the outward unit normal at the boundary. The quantity $\sigma\cdot n$
is known as the *traction* or stress vector at the boundary, and is often
prescribed as a boundary condition. We assume that it is prescribed
at a part $\partial\Omega_T$ of the boundary as $\sigma\cdot n = T$. On the remaining part of the boundary, we assume that the value of
the displacement is given as a Dirichlet condition.
We then have

!bt
\[
\int_\Omega \sigma : \nabla v \dx =
\int_\Omega f\cdot v \dx
+ \int_{\partial\Omega_T} T\cdot v\ds\tp\]
!et
Inserting the expression (ref{ftut:elast:varform:stressu}) for
$\sigma$ gives the variational form with $u$ as unknown. Note that the
boundary integral on the remaining part
$\partial\Omega\setminus\Omega_T$ vanishes due to the Dirichlet
condition ($v = 0$).

We can now summarize the variational formulation as: find $u\in V$ such that

!bt
\begin{equation}
a(u,v) = L(v)\quad\forall v\in\hat{V},
\end{equation}
!et
where

!bt
\begin{align}
a(u,v) &= \int_\Omega\sigma(u) :\nabla v \dx,
label{ftut:elast:varform:sigma_inner_gradv}
\\
\sigma(u) &= \lambda(\nabla\cdot u)I + \mu(\nabla u + (\nabla u)^{\top}),\\
L(v) &= \int_\Omega f\cdot v\dx + \int_{\partial\Omega_T}
T\cdot v\ds\tp
\end{align}
!et

One can show that the inner product of a symmetric tensor $A$ and a
anti-symmetric tensor $B$ vanishes. If we express $\nabla v$ as a sum
of its symmetric and anti-symmetric parts, only the symmetric part will
survive in the product $\sigma :\nabla v$ since $\sigma$ is a
symmetric tensor. Thus replacing $\nabla u$ by the symmetric gradient
$\epsilon(u)$ gives rise to the slightly different variational form

!bt
\begin{equation}
a(u,v) = \int_\Omega\sigma(u) :\varepsilon(v) \dx,
label{ftut:elast:varform:sigma_inner_eps}
\end{equation}
!et
where $\varepsilon(v)$ is the symmetric part of $\nabla v$:

!bt
\[ \varepsilon(v) = \frac{1}{2}\left(\nabla v + (\nabla v)^{\top}\right)\tp\]
!et
The formulation (ref{ftut:elast:varform:sigma_inner_eps}) is what naturally
arises from minimization of elastic potential energy and is a more
popular formulation than (ref{ftut:elast:varform:sigma_inner_gradv}).

# #ifdef NEEDS_MORE_WORK
!bnotice Remark on anisotropic elasticity
We can easily allow for anisotropic materials since
(ref{ftut:elast:varform:sigma_inner_eps}) is just the inner product of
the stress tensor and the strain tensor. Anisotropic elasticity is
easiest to deal with by having a 6-vector with the unique components of
stress and strain and relate the 6-vectors through a $6\times 6$
elasticity matrix $D$: $\sigma = D\varepsilon$. We then form the
inner product of $\sigma$ and $\varepsilon$ to be $\varepsilon^T D\varepsilon$.
!enotice
# #endif

===== FEniCS implementation =====

=== Test problem ===

As a test example, we may look at a clamped beam deformed under its
own weight. Then $f=(0,0,-\varrho g)$ is the body force per unit
volume with $\varrho$ the
density of the beam and $g$ the acceleration of gravity. The beam is
box-shaped with length $L$ and has a square cross section of width $W$. We
set $u=\ub = (0,0,0)$ at the clamped end, $x=0$. The rest of the boundary is
traction free; that is, we set $T = 0$.

=== The code ===

We first list the code and then comment upon the new constructions
compared to the Poisson equation case.

@@@CODE src/elasticity.py fromto: from fenics import@# Save solution

We comment below on some of the key features of this example that
we have not seen in previous examples.

=== Vector function spaces ===

The primary unknown is now a vector field $u$ and not a scalar field,
so we need to work with a vector function space:

!bc pycod
V = VectorFunctionSpace(mesh, 'P', 1)
!ec
With `u = Function(V)` we get `u` as a vector-valued finite element function.

=== Constant vectors ===

In the boundary condition $u=0$, we must set a vector value to zero, not just
a scalar, and a constant zero vector is specified as `Constant((0, 0, 0))` in
FEniCS. The corresponding 2D code would use `Constant((0, 0))`.
Later in the code, we also need `f` as a vector and specify it
as `Constant((0, 0, rho*g))`.

=== `nabla_grad` ===

The gradient and divergence operators now have a prefix `nabla_`.
This is strictly not necessary in the present problem, but
recommended in general for vector PDEs arising from continuum mechanics,
if you interpret $\nabla$ as a vector in the PDE notation;
see the box about `nabla_grad` in Section ref{ftut1:NS:varform}.

=== Stress computation ===

As soon as `u` is computed, we can compute various stress measures, here
the von Mises stress defined as $\sigma_M = \sqrt{\frac{3}{2}s:s}$
where $s$ is the deviatoric stress tensor

!bt
\[ s = \sigma - \frac{1}{3}\mathrm{tr}\,(\sigma)\,I\tp\]
!et
There is a one to one mapping between these formulas and the FEniCS code:

!bc pycod-t
s = sigma(u) - (1./3)*tr(sigma(u))*Identity(d)
von_Mises = sqrt(3./2*inner(s, s))
!ec
The `von_Mises` variable is now an expression that must be projected to
a finite element space before we can visualize it.

=== Scaling ===

Before doing simulations for a specific problem, it is often
advantageous to scale the problem as it reduces the need for setting
physical parameters, and one obtains dimensionsless numbers that
reflect the competition of parameters and physical effects. We develop
the code for the original model with dimensions, and run the scaled
problem by tweaking parameters appropriately. Scaling reduces the
number of active parameters from 6 to 2 in the present application.

In Navier's equation for $u$, arising from inserting
(ref{ftut:elast:varform:stresstrain}) and
(ref{ftut:elast:varform:strainu}) in
(ref{ftut:elast:varform:equilibrium}),

!bt
\[ \nabla\cdot(\lambda\nabla\cdot u) + \mu\nabla^2 u = f,\]
!et
we insert coordinates made dimensionless by $L$, and $\bar u=u/U$,
which results in the dimensionless governing equation

!bt
\[
\beta\bar\nabla\cdot(\bar\nabla\cdot \bar u) + \bar\nabla^2 \bar u =
\bar f,\quad \bar f = (0,0,\gamma),\]
!et
where $\beta = \lambda/\mu$ is a dimensionless elasticity parameter and

!bt
\[ \gamma = \frac{\varrho gL^2}{\mu U}\]
!et
is also a dimensionless variable reflecting the ratio of the load
$\varrho g$ and the shear stress
term $\mu\nabla^2 u\sim \mu U/L^2$ in the PDE.

Sometimes, one will argue to chose $U$ to make $\gamma$ unity ($U =
\varrho gL^2/\mu$). However, in elasticity, this leads us to
displacements of the size of the geometry, which makes plots look very
strange. We therefore want the characteristic displacement to be a
small fraction of the characteristic length of the geometry.  This can
be achieved by choosing $U$ equal to the maximum deflection of a
clamped beam, for which there actually exists an formula: $U =
\frac{3}{2}\varrho gL^2\delta^2/E$, where $\delta = L/W$ is a
parameter reflecting how slender the beam is, and $E$ is the modulus
of elasticity.  Thus, the dimensionless parameter $\delta$ is very
important in the problem (as expected, since $\delta\gg 1$ is what
gives beam theory!).  Taking $E$ to be of the same order as $\mu$,
which is the case for many materials, we realize that $\gamma \sim
\delta^{-2}$ is an appropriate choice.  Experimenting with the
code to find a displacement that ``looks right'' in plots of the
deformed geometry, points to $\gamma = 0.4\delta^{-2}$ as our final
choice of $\gamma$.

The simulation code implements the problem with dimensions and
physical parameters $\lambda$, $\mu$, $\varrho$, $g$, $L$, and $W$.
However, we can easily reuse this code for a scaled problem: just set
$\mu = \varrho = L = 1$, $W$ as $W/L$ ($\delta^{-1}$), $g=\gamma$, and
$\lambda=\beta$.

FIGURE: [fig/beam2, width=800 frac=1] Gravity-induced deformation of a clamped beam: deflection (left) and stress intensity seen from below (right).
