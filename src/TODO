===== HPL list =====

Remember: cannot exceed 150 pages (as reported at the end of `ftut.log`).
Solutions to exercises will not appear in the printed book. If we run
out of pages, we can also remove the exercises by putting if-else
constructs around them. There will be one short printed tutorial and
then extended e-versions with exercises (and optionally solution) on our
github web site.

Regarding layout, we must use `svmono.cls` for the printed book, but
are allowed to use gray background in code boxes and lmodern instead
of Courier for monospace font. Springer's official ebook has exactly
the same layout. For all other versions on our github
web site, we can choose whatever layout we want.

 * `mshr` must align subdomains with cell facets!! Important feature.
 * Demonstrate that meshes and mesh functions can be stored in XML files.
 * Programs are now flat demos. Educate the reader with
   better software engineering habits: functions, classes, unit tests.
   Avoid copy-and-edit flat programs implied by today's collection. (HPL)
 * Find successful exercises from various tutorials (AL) and add as
   exercises in the book (HPL/AL). Exercises are key for learning
   software so having them (in an extended version?) sends an important
   signal about their relevance.
 * According to the `plot` documentation string, it should be easy to
   plot the element a la `plot(u.function_space().ufl_element())` but I
   did not get this to work. Not crucial, but plotting the element is a
   nice feature :-)
 * Comment regarding FEniCS demos: The documented demos mention a lot
   of packages: DOLFIN, FFC, Fiat, ... Make sure the reader of the tutorial
   does not get lost in the jungle of packages and make sure the names are
   explained somewhere in the text
   such that the tutorial is a good background for
   understanding every demo in every detail.
 * Introduce `near(x, x0, eps`)` earlier? Not used until it got the `eps`
   argument, but is more readable. Important to understand the
   underlying problem with rounding which is more explicit when doing
   `abs(x-x0) < eps`.
 * Can we change the value of `DOLFIN_EPS`? `imort fenics; fenics.DOLFIN_EPS=...` will work, but then all modules in the simulator must do `import fenics`. Note that its value is very strict, e.g., `10.1+10.2` has rounding $3.5 10^{-15}$, so `DOLFIN_EPS` is strictly for scaled problems only, where all variables are in $[0,1]$.


===== HPL questions =====

=== Iterative linear solvers info ===

We can get this printed out on the screen, but is there any method to
extract this text inside the program, such that we can see how many
Krylov iterations we do etc.? Any way for Python to capture the standard
output stream in C++?

Easy to write a script that post-processes
the output, but we have to wait until the simulator has terminated, or
we can pipe to a script `process.py` that treats the output in some
desired way (could append some into to a file and that is reopened
by the simulator):

!bc sys
Terminal> python mysolver.py | process.py
!ec
where the simplest `process.py` is

!bc pypro
import sys, time
t0 = time.clock()
while True:
    line = sys.stdin.readline()
    if not line:
        break
    t1 = time.clock()
    print 'after %g seconds: %s' % (t1-t0, line.rstrip())
print 'END'
!ec
======= To-do list =======

===== AL list =====

 * Title?: Writing State-of-the-Art Finite Element Solvers in Minutes
   (HPL: Yes - let's have this for a while)
 * Title: "Writing... in minutes" sounds more like a good subtitle
   than an actual title. We already have a good subtitle in "The
   FEniCS tutorial" so let's try to find a more "serious" main title.
   (HPL: What about switching?)
 * Title?: Introduction to Finite Element Programming
 * Add 2nd author
 * Rewrite abstract to reflect new title and non-initial state of book
 * Rename and expand Chapter 5: Boundary conditions, markers and subdomains
   (many and confusing ways to do this, `MeshFunctions`, `MeshData`, etc)
   (HPL: This is important and confusing, but very much needed early on)
 * DONE: Add chapter on installation (difficult, still in flux)
 * Installation chapter should be number 0
 * Remove capitalization of sections in Chapter 8
 * Add new chapter: "Advanced example: Linear elasticity"
   (HPL: do this first - important for many courses)
 * Add new chapter: "Advanced example: Hyperelasticity"
 * Add new chapter: "Advanced example: Incompressible Navier-Stokes"
 * Place these chapters near end of book so progression becomes:
    * Installation
    * Fundamentals (3 chapters: Fundamentals, Time-dependent, Nonlinear)
    * Misc technical chapters (boundary conditions, geometries etc)
      (HPL: Think we need these things before time-dependent, or maybe
      split the very simplest things from time-dependent (1st example)
      and nonlinear (`solve(F==0, ...)`) and place in fundamentals?)
    * Advanced examples (using previously discussed techniques)
 * Add chapter on performance and profiling? HPL: Yes!
 * Move source code links to `http://fenisproject.org/tutorial` (we can
   set up a cron job to copy files from `hplgit`)
 * Number examples sequentially, something like
    * `fenics_tutorial_01_poisson_first.py`
    * `fenics_tutorial_05_poisson_nonlinear.py`
   Hierarchic structure becomes complicated, better with flat structure
   (HPL: These filenames are too long, giving too long lines in the text
   and the need for lots of rewrites. We have an automated scheme to
   assign new filenames to the logical files that we use for the text.
   Right now the names are `ft01_poisson.py`.)
 * Add command `fenics-version`
 * DONE: Use dot and grad in Poisson example (not `inner` and `nabla_grad`)
 * Use new notation `'P'` instead of `'Lagrange'` in `FunctionSpace`. HPL: Done.
   (HPL: Not yet documented in `FunctionSpace` ;-)
 * DONE: Use `from fenics import *`
 * Fix copyright footer so we avoid the linebreak. HPL: Fixed. This and similar adjustments in the latex file is easily done by auto editing in `make.sh`.
 * How does doconce handle -- and ---? HPL: Like latex. Just use ndash if you want. ndash and mdash are ignored in other formats than latex and html where there is no support for this. Just introduce ndash where you like, as in Navier--Stokes.
 * When to use $\tp$ and when to use . ? HPL: Springer had a rule with thinspace. I don't know if it applies to the brief series, but it became a habit of mine since other styles demanded it.
 * When to specify floats as 2 or 2.0? HPL: In code? Anytime there is
   a danger of integer division.
 * When do talk about a function `foo` or `foo()`. HPL: If parameters in any
   way are considered important, include them, otherwise just the function
   name. (Need to know info.)
 * varproblem reads: find ... or varproblem reads: Find ...?
   HPL: I use lower case after colon, even if full sentence - that's more usual
   in English I was told than our Scandinavian style.
 * Need to include example of mixed problems (systems) in book 1.
   HPL: Agree.
 * Consistency check for mesh size: 16 x 16 good choice overall?
   HPL: Depends. If we have exact numerical solution, a very coarse mesh
   suffices, otherwise we should have at least two meshes and report
   the error fraction. But 16 x 16 sounds reasonable as numbers in the
   demo programs.
 * Add little box in all examples listing what new features are
   explained for the particular example.
   HPL: Good idea!
 * Should all code files be included in the text?
   HPL: No, we run out of space. Can do it in the beginning. Later, the
   codes also grow in size, and I think codes that span two pages or more
   give a ``boring'' look in the book. People won't read it...
   Instead we use the mako construction to link to the repo file.
   It has nice syntax highlighting, comes up in a separate window if you
   want, and can be downloaded. Maybe we need to explain ``raw'' the first
   time we link to a github file?
 * Possible extra appendix chapters (but we don't seem to have enough
   space):
   List of finite element spaces + picture of Periodic Table,
   List of UFL operators,
   List of variational forms for common PDE,
   Notation and conventions for simplices,
   List of most useful FEniCS classes and most useful member functions: Mesh, FunctionSpace, VectorFunctionSpace, DirichletBC, etc.
Comments after proofreading August 2016

[ ] Move Python codes for vol1 to vol1/python, the rest to vol2/python
[ ] Needed to use $\text{Lam\'e's}$ to trick doconce spellchecker
[ ] Needed to uncomment line \usepackage[utf8x]{inputenc} in latex.py
    when using Springer_sv to fix Norwegian and Swedish characters in preface
[x] Fix UTF-8 issues in preface
[ ] Manage to compile everything using make.sh (only 'make' works for me)
[x] There are still some unfortunate page breaks. I will ignore these
    for now and look at page formatting later.
    HPL: Note that Springer fixes all this. They first generate XML, then
    new latex with their special style. They can't use the authors' PDF
    anymore.
[ ] Need to add instructions for how to send feedback and report typos
[ ] Think about whether to use http or https i references
[ ] Create web page for book: fenicsproject.org/tutorial
[x] Check that Docker image stable-py3 is actually available: It's not
[ ] Alignment of equations: $x \in \Omega$ using alignat
[x] How to run spellcheck?
    HPL: I do that automatically (doconce spellcheck - much inspired by
    the fenics book spellchack) for every compile.
[x] Regenerate the plot for first Poisson example on 8 x 8 mesh
[x] Add reference to SIAM News periodic table article in Chapter 1
[x] Inconsistent notation: u_D in math and u_b in code
[x] Small figures, for example 2.4, with difficult to read text.
    HPL: I don't think this one is difficult to read... But we can do frac=1
    and width=700 to blow it up as is.
[x] Check all Navier--Stokes etc
    HPL: This is also something Springer will do, but it's nice with
    ndash in our PDF as well.
[x] Check vtkfile << (u, t) for time-dependent problems
    HPL: Think this is in order.
[x] kappa(x) or q(x) in Section 3.2? Watch out for comment on q in
    sympy code and name clash box.
    HPL: I think it's a good point to have q, which makes a name clash with
    fenics so that we can illustrate that (common) problem. These are one of
    the details that are seldom met in text, but occurs in practice, and
    the closer we get to practice for the reader, the better ;-)
[x] Check all 'variational problem: Find' (not 'find')
    HPL: The most common form in English is not to use capital, but
    there are no strict rules, see https://www.grammarly.com/handbook/mechanics/capitalization/16/capitalization-first-word-after-a-colon-if-it-begi/
[ ] Check all eqns (...)--(...)
    HPL: Can make a regex check. Again, Springer will apply their style to
    the latex from XML. As far as I can see from the scripting book (vol II in
    Simula SpringerBrief), they used single dash.
[x] Check all 'Save' vs 'Dump' in code examples
[x] Which equations should be numbered?
    HPL: I use to number all equations that are likely to be referred
    to (orally) with discussing the text.
[x] Always use xrange?
    HPL: It's not a big deal for efficiency in our examples and range is
    Python 3 (no xrange), so I prefer range then.
[x] k0 or k_0? Same for Omega0 in subdomains chapter
    HPL: Maybe underscore is best?
[ ] Renumber to 0, 1, 2 in NS and reaction examples?
    HPL: Same for me; math vs Python numbering...
[ ] Rename poisson_vc.py to something less cryptic
[ ] poisson_vc.py is 900 lines long! Does it have to be that
    complicated?
[ ] Clean out files and codes that are not used (move to 'old')
[ ] Should we reference functions `foo` or `foo()`.
    In Chapter 5 we use `solver` but `foo()` earlier in the book
[ ] """Comment""" in functions even if just one line?
[ ] Check the `dolfin_parameters.xml` file if it still works
[ ] Check demo/documented/eigenvalue, is the name correct?
[x] Replace normalvec by n for consistency
[ ] Check that we are not missing important references: DOLFIN paper
[ ] Which code files end up in the top-level src directory?
    This directory needs to be cleaned up (remove old codes).
[ ] Divide codes into subdirectories for vol I and vol II
[ ] Divide do.txt files into subdirectories for vol I, vol II and unused
[ ] Why CamelCase for BoxField? It's a Python module, so better named it boxfield?

Codes to check:

poisson.py
membrane.py
heat.py
gaussian_diffusion.py
nlpoisson.py
elasticity.py
navier_stokes_channel.py
navier_stokes_box.py ???
navier_stokes_cylinder.py
reaction_system.py
poisson_vc.py
BoxField.py
